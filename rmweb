#!/usr/bin/env python
import argparse
import pycurl
import json
import sys
import os
import re
from io import BytesIO

REMARKABLE_IP_ADDRESS = "10.11.99.1"


def request_contents(dir_id):
    buffer = BytesIO()
    c = pycurl.Curl()
    c.setopt(c.URL, f"http://{REMARKABLE_IP_ADDRESS}/documents/{dir_id}")
    c.setopt(c.CONNECTTIMEOUT, 3)
    c.setopt(c.POST, 1)
    c.setopt(c.WRITEDATA, buffer)
    c.perform()
    c.close()
    return json.loads(buffer.getvalue())


def download_file_id(file_id, file_name):
    # {"error":"Not allowed to download collections"}
    c = pycurl.Curl()
    c.setopt(c.URL, f"http://{REMARKABLE_IP_ADDRESS}/download/{file_id}/placeholder")
    c.setopt(c.CONNECTTIMEOUT, 3)
    f = open(f"{file_name}.pdf", "wb")
    c.setopt(c.WRITEDATA, f)
    c.perform()
    c.close()
    f.close()


def download_dir_contents(contents_json, dir_name, recursive=False):
    os.mkdir(dir_name)
    current = os.getcwd()
    os.chdir(dir_name)
    for item in contents_json:
        if item["Type"] == "CollectionType":
            if recursive:
                download_dir_contents(item["Contents"], item["VissibleName"], recursive)
        else:
            download_file_id(item["ID"], item["VissibleName"])
    os.chdir(current)


def upload_file(file_path):
    c = pycurl.Curl()
    c.setopt(c.URL, f"http://{REMARKABLE_IP_ADDRESS}/upload")
    c.setopt(c.CONNECTTIMEOUT, 3)
    c.setopt(
        c.HTTPPOST,
        [
            (
                "file",
                (
                    c.FORM_FILE,
                    file_path,
                    c.FORM_FILENAME,
                    file_path,
                    c.FORM_CONTENTTYPE,
                    "application/pdf",
                ),
            ),
        ],
    )
    c.perform()
    c.close()


def fill_directories(contents_json):
    for item in contents_json:
        if item["Type"] == "CollectionType":
            item["Contents"] = request_contents(item["ID"])
            fill_directories(item["Contents"])
    return contents_json


def request_filled_root_contents():
    return fill_directories(request_contents(""))


def print_contents(contents_json, indent_level=0):
    for item in contents_json:
        item_output = (indent_level * "  ") + item["VissibleName"]  # not my typo
        if item["Type"] == "CollectionType":
            print(item_output + ":")
            print_contents(item["Contents"], indent_level + 1)
        else:
            print(item_output)


def download_matches(contents_json, name):
    for item in contents_json:
        if item["Type"] == "CollectionType":
            if name in item["VissibleName"]:
                download_dir_contents(item["Contents"], item["VissibleName"], True)
            else:
                download_matches(item["Contents"], name)
        elif name in item["VissibleName"]:
            download_file_id(item["ID"], item["VissibleName"])


def upload_main(args):
    for file in args.files:
        upload_file(file)


def print_main(args):
    print_contents(request_filled_root_contents())


def download_main(args):
    download_matches(request_filled_root_contents(), args.name[0])


def dump_main(args):
    download_dir_contents(request_filled_root_contents())


def main():
    parser = argparse.ArgumentParser()

    subparsers = parser.add_subparsers()

    upload_parser = subparsers.add_parser("up")
    upload_parser.add_argument("files", type=str, nargs="+", help="Files to upload.")
    upload_parser.set_defaults(func=upload_main)

    print_parser = subparsers.add_parser("print")
    print_parser.set_defaults(func=print_main)

    download_parser = subparsers.add_parser("down")
    download_parser.add_argument(
        "string", type=str, nargs=1, help="Regular expression to match"
    )
    download_parser.set_defaults(func=download_main)

    dump_parser = subparsers.add_parser("dump")
    dump_parser.set_defaults(func=dump_main)

    args = parser.parse_args()
    args.func(args)


if __name__ == "__main__":
    main()
